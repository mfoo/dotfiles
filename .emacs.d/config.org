#+TITLE: Martin Foot's Emacs Configuration
#+AUTHOR: Martin Foot
#+EMAIL: martin.foot@du.co
#+STARTUP: indent

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

This file stores my emacs configuration. It is written using [[http://orgmode.org/][org-mode]] which is an excellent way to organise notes and,
as it turns out, an excellent way to organise my configuration file. My emacs set-up makes uses of ~org-babel-load-file~
to generate an =emacs-lisp= file when emacs boots that is based on this file. This extracts source code blocks in
=emacs-lisp= which emacs then evaluates. This file came about after reading an excellent [[http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php][blog post by Arnaud Legrand]] and
a [[https://www.youtube.com/watch?v=VIuOwIBL-ZU][YouTube video by Daniel Mai]].

This file makes a lot of use of the ~use-package~ function. This is a nice way to package up a package declaration with
its keybindings and hooks and also have it automatically installed. There's a good description on how it works [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][here]].

* Installation instructions
Copy this file (not the org-mode generated output) to =~/.emacs.d/config.org=.

Then add ~(org-babel-load-file (concat user-emacs-directory "config.org"))~ to =~/.emacs=.
* Package repositories
I use Melpa and Marmalade for repositories.

#+BEGIN_SRC emacs-lisp
(require 'package)
;(require 'cl)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

Then, since I use ~use-package~ for every package from the repositories, initialise this first.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC
* Parentheses
Emacs will automatically highlight closing parentheses (also braces, curly braces).
#+BEGIN_SRC emacs-lisp
(electric-pair-mode)		; Automatically complete parentheses when typed
(show-paren-mode)			; Automatically highlight parenthesis pairs
(setq show-paren-delay 0) ; show the paren match immediately
#+END_SRC

Then I use =[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]= to highlight nested parentheses in different colours.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config (rainbow-delimiters-mode)		; Highlight nested parentheses in different colours
)
#+END_SRC
* Fill columns and line highlighting
I find a 120 character line length is best for modern screens. Individual languages/major modes can override this.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 120)

(global-hl-line-mode)             ; Highlight the current cursor line horizontally
#+END_SRC
* Line numbering and cursor position
I enable line numbers globally and enable the cursor position being shown in the bottom left.

#+BEGIN_SRC emacs-lisp
(global-linum-mode)                       ; Enable line numbers in everywhere
(setq linum-format "%d ")                 ; Stick a space after the line numbers

(column-number-mode)                      ; Show the column number in the cursor position in the bottom left
#+END_SRC
* Yes or no prompts
Use 'y' or 'n' instead of 'yes' and 'no' in interactive prompts. This saves typing.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Symbolic links
By default emacs doesn't follow symlinks

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)             ; Automatically follow symlinks when visiting them
#+END_SRC
* OS Clipboard integration
Enable copy-paste from the OS clipboard

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)

;(setq select-active-regions nil)
;(setq x-select-enable-primary t)
;(setq x-select-enable-clipboard t)
;(setq mouse-drag-copy-region t)
#+END_SRC
* Temporary backup files
Don't make temporary backup files. These are more annoying than they are useful.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC
* Font size
Add some keybindings to increase and decrease the font size

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+END_SRC
* User information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Martin Foot"
      user-mail-address "martin@mfoot.com")
#+END_SRC
* Startup message
Don't show the default emacs startup message when it's opened
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
* Terminal bells
Disable the terminal bell. Use a visible bell instead. A non-nil value causes emacs to try and flash the frame to
  represent a bell.

#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC
* Menu bar
Don't show emacs' menu bar - I never use the mouse when running emacs in a window

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
* Whitespace
** Trailing whitespace
Inconsistent whitespace annoys me more than it should. At a minimum, highlight trailing whitespace.

#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)

;(setq whitespace-line-column 118) ; Highlight lines over 118 characters in whitespace-mode
#+END_SRC
** Default emacs backspace behaviour
I also despise emacs' default behaviour when hitting backspaces on tabs - it converts the tab into the tab-width number
of spaces and inserts tab-width -1 spaces. This leads to inconsistencies (tabs vs spaces). This should be handled by the
relevant major mode.

#+BEGIN_SRC emacs-lisp
(setq backward-delete-char-untabify-method nil)
#+END_SRC
** Tabs
Change the default tab settings to use four spaces. This controls how big a tab appears inside emacs.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  ;(setq-default tab-always-indent 'complete)
#+END_SRC

Set up the tab stop list. This is what emacs uses when it can't find an appropriate tab stop - i.e how much to try
indenting when tab is hit.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-stop-list (number-sequence 4 200 4))
#+END_SRC

Insert tabs by default when auto-formatting.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode t)
#+END_SRC
** TODO Highlighting font faces
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whitespace-hspace ((t (:foreground "black"))))
 '(whitespace-space ((t (:foreground "dark slate gray" :slant italic))))
 '(whitespace-tab ((t (:foreground "black")))))
;(global-whitespace-cleanup-mode)	; Enable whitespace-mode globally

;(setq whitespace-style (quote (spaces tabs newline space-mark tab-mark)))
** Git
I use the excellent [[http://magit.vc/][magit]] for emacs git integration. This is bound to =C-x g=.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status))
)
#+END_SRC
* Org Mode
Configure org-mode to log TODO state transitions into a draw so I can keep track of time.

#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC

I also configure a set of states.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords (quote
  ((sequence "TODO(!)" "IN_PROGRESS(d!)" "|" "DONE(d!)"))))
#+END_SRC

Enable pretty entities - shows e.g. \alpha \beta \gamma as UTF-8 characters.

#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

In =org-mode= we can use:
- \=fixed\= for fixed-width (=example=)
- \~code\~ for code (~example~)
- \*bold\* for bold (*example*)
- \/italics\/ for emphasis (/example/)
- _underline_ for underline (_example_)

We don't want to see the markup for indentation, so disable it.

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

Ensure native syntax highlighting is used for inline source blocks in org files

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

When emacs source-formats a code block, don't add spaces before it (it messes with syntax highlighting in major modes).

#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 2)
#+END_SRC

Configure the languages that Babel will automatically syntax highlight

#+BEGIN_SRC emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)
   (sh . t)
   (ditaa . t)
   (dot . t)
   (calc . t)
   (java . t)
   (emacs-lisp . t)
  )
)
#+END_SRC

When we're using a GUI emacs we can display embedded images on startup

#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-babel-result-hide-all)
#+END_SRC

When exporting to HTML change check boxes into actual HTML check boxes.

#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'html)
#+END_SRC

I use =ditaa= for block diagrams. This executes a java program and needs to know where to find the jar.

#+BEGIN_SRC emacs-lisp
(setq org-ditaa-jar-path "/home/martin/bin/ditaa0_9.jar")
#+END_SRC
* Blog
[[http://www.mfoot.com][My blog]] uses a static site generator called [[https://jekyllrb.com/][Jekyll]]. This parses YAML files and produces static HTML content which I then
host on [[https://aws.amazon.com/s3/][Amazon S3]]. I really like the power of =org-mode= in Emacs, so this configuration block enables me to write blog
posts using =org-mode= and then use =org-mode='s publishing system to publish these files in a format that Jekyll
understands. This configuration is based on [[ http://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org to Blog with Jekyll]], so reading through that is a good idea before
trying to understand this. I've adapted it slightly to work with the latest =org-mode= (the publishing functions changed
name), but other than that it all comes from there.

TODO: The next code block exists from some debugging, but right now everything works. Check if this is actually helping.
#+BEGIN_SRC emacs-lisp
;(setq org-export-in-background nil)
(setq org-export-async-init-file "~/.emacs.d/org-export-async.el")
#+END_SRC

Here we define a list of projects for org mode. When using the export processor (=C-c C-e=) a projects option now appears
at the bottom from any file. Two projects are defined; one for the blog posts that get processed with the HTML
publishing function, and one for static content that gets copied verbatim. I can select a project and select either one
of the two projects or the component project that wraps both of them. Org will maintain timestamps and caches of these
files so that it doesn't regenerate what it doesn't have to.

TODO: Describe folder structure. Link to GitHub?

#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
  '(
     ("org-mfoot"
       ;; Path to your org files.
       :base-directory "~/repositories/mfoot.com/org/"
       :base-extension "org"

       ;; Path to your Jekyll project.
       :publishing-directory "~/repositories/mfoot.com/jekyll/"
       :recursive t
       :publishing-function org-html-publish-to-html
       :headline-levels 4
       :html-extension "html"
       :body-only t ;; Only export section between <body> </body>

       :section-numbers nil
       :headline-levels 4
       :table-of-contents nil
       :auto-index nil
       :auto-preamble nil
       :body-only t
       :auto-postamble nil
     )

    ("org-static-mfoot"
          :base-directory "~/repositories/mfoot.com/org/"
          :base-extension "css\\|js\\|png\\|jpg\\|gif"
          :publishing-directory "~/repositories/mfoot.com/jekyll"
          :recursive t
          :publishing-function org-publish-attachment)

    ("mfoot.com" :components ("org-mfoot" "org-static-mfoot"))
))
#+END_SRC

In addition, I need to install the =htmlize= package to provide syntax highlighting when exporting HTML. See [[http://stackoverflow.com/questions/24082430/org-mode-no-syntax-highlighting-in-exported-html-page][here]] for more
information.

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t
)
#+END_SRC

TODO: Write some notes on how I publish this to S3 with s3-website. I always forget this and have to check my bash
history.
* Window navigation and scrolling
Scroll smoothly rather than by paging
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
#+END_SRC

Add vim-like navigation between panes in a window using windmove.

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
(global-set-key (kbd "C-c <left>")	'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")	'windmove-up)
(global-set-key (kbd "C-c <down>")	'windmove-down)
#+END_SRC

I use [[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]] for fast buffer navigation. It allows the use of =<space> <character to search for>= to highlight
jump targets of that character. This has to be configured in =evil-mode=.

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :init (progn
    (use-package evil
      :ensure t
    )
  )
  :config  (define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)
)
#+END_SRC
* Reloading files
I swap branches a lot. =auto-reload-mode= will automatically reload opened buffers (prompting to save or not)

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC
* C
At work we use BSD-style C/C++. We also set the default indentation to four spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4)
  (setq-default c-default-style "bsd")
#+END_SRC
* Base editor configuration
I came from Vim and some of the default emacs functionality felt weird to me.

#+BEGIN_SRC emacs-lisp

    ;; Enable multiple windows like a graphical debugger then using GDB
  (setq gdb-many-windows t)

  (set-face-attribute 'default nil :height 90)

  (tool-bar-mode -1)
  ;; TODO: Try and get projectile-ag to work. Is git grep better?
  (setenv "PATH" (concat (getenv "PATH") ":" "/usr/local/bin"))
  (setenv "PATH" (concat  "/home/martin/.rvm/rubies/ruby-2.1.5/bin" ":" "/home/martin/.rvm/gems/ruby-2.1.5/bin" ":" (getenv "PATH")))
  (setenv "GEM_HOME" "/home/martin/.rvm/gems/ruby-2.1.5")
  (add-to-list 'exec-path "/home/martin/.rvm/gems/ruby-2.1.5/bin")
  (add-to-list 'exec-path "/home/martin/.rvm/rubies/ruby-2.1.5/bin")
  ;; Human readable sizes in dired
  (setq dired-listing-switches "-alh")


#+END_SRC

* Package installation
All of the packages that I use get automatically installed. First we define ~required-packages~ and then a function that
iterates over all of them, installing each one. My =~/.emacs= configures [[https://melpa.org/][Melpa]] and [[https://marmalade-repo.org/][Marmalade]] before this gets executed.

#+BEGIN_SRC emacs-lisp
(defvar required-packages
  '(
    ;; https://github.com/benprew/flymake-puppet
    ;;
    ;; Puppet flymake support with puppet-lint
    flymake-puppet

	;; https://github.com/flycheck/flycheck
	;;
	;; Modern, on-the-fly syntax checking.
	flycheck

	;; https://github.com/purcell/whitespace-cleanup-mode
	;;
	;; whitespace-cleanup is a handy function, but putting it in
	;; before-save-hook for every buffer is overkill, and causes messy
	;; diffs when editing third-party code that did not initially have
	;; clean whitespace.  Additionally, whitespace preferences are
	;; often project-specific, and it's inconvenient to set up
	;; before-save-hook in a .dir-locals.el file.
	;; whitespace-cleanup-mode is a minor mode which calls
	;; whitespace-cleanup before saving the current buffer, but only
	;; if the whitespace in the buffer was initially clean. It
	;; determines this by quickly checking to see if
	;; whitespace-cleanup would have any effect on the buffer
	whitespace-cleanup-mode

	;; Provides git modification markers in the left hand side gutter~
	;; window that shows which lines have been locally modified
	;; compared to the git index
	;;
	;; This is currently commented out because it does not work well
	;; with linum-mode.
	; git-gutter

  markdown-mode
	dockerfile-mode
	yaml-mode


	;; https://github.com/genehack/smart-tab
	;;
	;; An intelligent tab completion function for Emacs
	;; http://www.emacswiki.org/emacs/TabCompletion
	smart-tab

	indent-guide

	;; https://github.com/lunaryorn/puppet-mode
	;;
	;; Puppet Mode lets you edit Puppet 3 manifests with GNU Emacs 24.
	puppet-mode



	;; https://github.com/pezra/rspec-mode
	;;
	;; Enable running rspec tests from inside emacs
	rspec-mode


	;; https://github.com/rejeep/ruby-end.el
	;;
	;; Automatically insert 'end' blocks when 'do' is typed in ruby
	ruby-end


	;; https://github.com/antonj/scss-mode
	scss-mode

  ) "a list of packages to ensure are installed at launch.")


;; method to check if all packages are installed
;(defun packages-installed-p ()
;  (loop for p in required-packages
;		when (not (package-installed-p p)) do (return nil)
;	finally (return t)))
;
;; if not all packages are installed, check one by one and install the missing ones.
;(unless (packages-installed-p)
;  ; check for new packages (package versions)
;  (message "%s" "Emacs is now refreshing its package database...")
;  (package-refresh-contents)
;  (message "%s" " done.")
;  ; install the missing packages
;  (dolist (p required-packages)
;	(when (not (package-installed-p p))
;	  (package-install p))))
#+END_SRC

* Themes and visual config
** Smart mode line
[[https://github.com/Malabarba/smart-mode-line][Smart Mode Line]] is a mode-line for emacs.

#+BEGIN_QUOTE
Smart Mode Line is a sexy mode-line for Emacs. It aims to be easy to read from small to large monitors by using colors,
a prefix feature, and smart truncation.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (progn
      (setq sml/no-confirm-load-theme t)
      (setq sml/theme 'powerline)
      (sml/setup)
    )
  )

  (use-package smart-mode-line-powerline-theme
    :ensure t
  )

  ;; Allow the solarized-dark theme
  (setq custom-safe-themes
     (quote
      ("a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "1297a022df4228b81bc0436230f211bad168a117282c20ddcba2db8c6a200743" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4"
      default)))


  (use-package solarized-theme
    :ensure t
    :init (load-theme 'solarized-dark))
#+END_SRC
* Editor augmentation
** Vim customisations
[[http://www.emacswiki.org/emacs/Evil][Evil mode]] provides vim-style keybindings for emacs. It makes it much more usable for a long-time vim user. [[https://github.com/timcharper/evil-surround][Evil-surround]]
is an emacs wrapper of Tim Pope's [[https://github.com/tpope/vim-surround][vim-surround]] plugin. [[https://github.com/krisajenkins/evil-tabs][Evil-tabs]] is an emacs mode that allows tabs with vim's tab
keybindings.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode) ; Enable evil mode globally
)

(use-package evil-surround
  :ensure t
  :config (global-evil-surround-mode t)
)

(use-package evil-tabs
  :ensure t
  :config (global-evil-tabs-mode t)
)
#+END_SRC

By default emacs doesn't tab indent to the current level when you hit return. Move to vim style.

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC
** Projectile
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a
project level without introducing external dependencies(when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find (but for performance sake an indexing
mechanism backed by external commands exists as well).

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config (projectile-global-mode)		  ; Enable projectile everywhere
)
#+END_SRC

** Helm mode
[[https://github.com/emacs-helm/helm][Helm]] is incremental completion and selection narrowing framework for Emacs. It will help steer you in the right
direction when you're looking for stuff in Emacs (like buffers, files, etc). It's awesome when combined with
[[http://tuhdo.github.io/helm-projectile.html][helm-projectile]] for jumping around projects and finding files within them.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init (progn
    (require 'helm-config)
    (use-package helm-projectile
      :ensure t
      :commands helm-projectile
    )
    (use-package helm-ag :ensure t)
    (helm-mode 1)
    ;;(require 'helm-ls-git)
    ;(setq projectile-completion-system 'helm) ; Use helm as the projectile completion system
    ;; Enable Helm completion and suggestions
    (helm-autoresize-mode 1)
  )
  :bind ("M-x" . helm-M-x)
  :config (setq projectile-completion-system 'helm)
)
#+END_SRC

** Anzu
[[https://github.com/syohex/emacs-anzu][Anzu]] shows how many strings match the regex you're replacing and show the effect of replacement as the substitution is
typed. This is awesome. Using =%s/using/foo/= you'll see the change to =foo= in the buffer.

http://pragmaticemacs.com/emacs/prettier-text-replacement-with-anzu/

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :init (global-anzu-mode)
  :bind (
    ("M-%" . anzu-query-replace)
    ("C-M-%" . anzu-query-replace-regexp)
  )
)
#+END_SRC

** Rainbow mode
Highlights CSS colours in their actual colour. For instance (probably won't be visible in the export):

#+BEGIN_SRC css
div.example {
  background-color: #cc3;
}
#+END_SRC

This is enabled globally:

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :config (rainbow-mode)
)
#+END_SRC

** Coffee mode
Major mode for editing CoffeeScript files.

#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :ensure t
  :config (setq coffee-tab-width 2)
)

(use-package flymake-coffee :ensure t)
#+END_SRC
** Docker
#+BEGIN_SRC emacs-lisp
(use-package docker :ensure t)
(use-package dockerfile-mode :ensure t)
#+END_SRC
** Ruby configuration

#+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode
  :ensure t
  :config (setq ruby-deep-indent-paren nil)
)
#+END_SRC
* Code snippet handling
I use [[https://github.com/capitaomorte/yasnippet][yasnippet]] for code snippet handling. This is enabled globally.

#+BEGIN_SRC emacs-lisp
; (use-package yasnippet
;   :ensure t
;   :config (yas-global-mode 1)
; )
#+END_SRC
* Other configuration
#+BEGIN_SRC emacs-lisp
; Indent guide - highlight current indent level vertically
; (indent-guide-global-mode)
; (setq indent-guide-recursive t)

(defun common-text-editing-hook ()
  "Mode configuration for working with text files"
  (flyspell-mode)						; Automatic spell checking
  (auto-fill-mode)						; Add line wraps up to fill-column automatically
  )

(defun common-programming-language-hook ()
  "Mode configuration for working with source code files"
  (flycheck-mode)
  (flyspell-prog-mode))

;(defun projectile-custom-hook ()
;  "Mode configuration for helm-projectile"
;  (global-set-key (kbd "C-c p g") 'helm-projectile-grep))

(add-hook 'markdown-mode-hook 'common-text-editing-hook)
(add-hook 'coffee-mode-hook 'common-programming-language-hook)
(add-hook 'coffee-mode-hook 'flymake-coffee-load)
(add-hook 'puppet-mode-hook 'flymake-puppet-load)
(add-hook 'ruby-mode-hook 'common-programming-language-hook)

;(add-hook 'projectile-mode-hook 'projectile-custom-hook)
;(add-hook 'helm-projectile-mode-hook 'projectile-custom-hook)

;(global-unset-key (kbd "C-c p g"))
;(global-set-key (kbd "C-c p g") 'helm-projectile-grep)
;(define-key projectile-command-map (kbd "C-c p g") 'helm-projectile-grep)

;; If we're at the end of a word and hit TAB, run the expand command
;; for tab completion. If we're not at the end of a word, run the
;; normal tab command
;; http://emacsblog.org/2007/03/12/tab-completion-everywhere/
(defun indent-or-expand (arg)
  "Either indent according to mode, or expand the word preceding point."
  (interactive "*P")
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))))
      (dabbrev-expand arg)
    (indent-according-to-mode)))

(local-set-key (kbd "<tab>") 'indent-or-expand)



(add-to-list 'auto-mode-alist '("\\.hamlc$" . haml-mode))
(add-to-list 'auto-mode-alist '("\\.json.jbuilder$" . ruby-mode))



(setq rspec-use-rake-when-possible nil)
(setq rspec-use-bundler-when-possible nil)
(setq rspec-use-rvm-when-possible t)


(setq circe-network-options
      '(("Freenode"
         :tls t
         :nick "my-nick"
         :sasl-username "my-nick"
         :sasl-password "my-password"
         :channels ("#emacs-circe")
         )))

;; Things that are not in melpa
(add-to-list 'load-path "~/Dropbox/lisp/")
(require 'flymake-easy)

(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))

(setq yas-snippet-dirs
      '(
		"~/Dropbox/snippets"                 ;; personal snippets
		))

(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
	("a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "1297a022df4228b81bc0436230f211bad168a117282c20ddcba2db8c6a200743" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(send-mail-function (quote smtpmail-send-it)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whitespace-hspace ((t (:foreground "black"))))
 '(whitespace-space ((t (:foreground "dark slate gray" :slant italic))))
 '(whitespace-tab ((t (:foreground "black")))))
#+END_SRC
