#+TITLE: Martin's Emacs Configuration
#+AUTHOR: Martin Foot
#+EMAIL: martin.foot@du.co
#+STARTUP: indent

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

This file makes a lot of use of the ~use-package~ function. This is a nice way to package up a package declaration with
its keybindings and hooks and also have it automatically installed. There's a good description on how it works [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][here]].

* Tasks [0/3]
** IN_PROGRESS Finish porting over old =.emacs= file to this file
   :LOGBOOK:  
   - State "IN_PROGRESS" from "TODO"       [2015-10-15 Thu 10:08]
   :END:      
** TODO Add an introduction section
** TODO Arrange modes and configuration based on programming language with a general section for non-programming
** TODO Fix the inline comments in emacs-lisp code being at random character indentations
* User information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Martin Foot"
      user-mail-address "martin@mfoot.com")
#+END_SRC

* Base editor configuration
I came from Vim and some of the default emacs functionality felt weird to me.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)             ; Automatically follow symlinks when visiting them
  (setq inhibit-startup-message t) ; Disable the welcome screen
  (menu-bar-mode -1)               ; Disable the menu bar
  (global-linum-mode)                       ; Enable line numbers in everywhere
  (setq linum-format "%d ")                 ; Stick a space after the line numbers
  (column-number-mode)              ; Show the column number in the cursor position in the bottom left
  (global-hl-line-mode)             ; Highlight the current cursor line horizontally

  (defalias 'yes-or-no-p 'y-or-n-p)   ; Use 'y' or 'n' instead of 'yes' and 'no' in interactive buffers
  ;;;; General editor configuration
  (setq scroll-step 1)            ; Scroll smoothly rather than by paging
  (setq visible-bell 1)           ; Disable terminal bells
  (setq-default
    show-trailing-whitespace t)       ; Highlight trailing whitespace
  (global-auto-revert-mode t) ; Automatically revert buffers when files change. This is useful when switching branches and
                              ; as I sync org mode files between computers

  (setq whitespace-line-column 118) ; Highlight lines over 118 characters in whitespace-mode

  (setq backward-delete-char-untabify-method nil) ; Disable hitting backspace on tabs converting that tab into spaces

  ;; default to using tabs at 4
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4)
  (setq-default tab-stop-list (number-sequence 4 200 4))
  (setq-default tab-always-indent 'complete)
  (setq-default c-basic-offset 4)
  (setq-default c-default-style "bsd")

  ;; By default emacs doesn't tab indent to the current level when you hit return. Move to vim style.
  (define-key global-map (kbd "RET") 'newline-and-indent)

  ;; Don't make backup save files
  (setq make-backup-files nil)

  ;; Enable multiple windows like a graphical debugger then using GDB
  (setq gdb-many-windows t)

  (set-face-attribute 'default nil :height 90)

  (tool-bar-mode -1)
  ;; TODO: Try and get projectile-ag to work. Is git grep better?
  (setenv "PATH" (concat (getenv "PATH") ":" "/usr/local/bin"))
  (setenv "PATH" (concat  "/home/martin/.rvm/rubies/ruby-2.1.5/bin" ":" "/home/martin/.rvm/gems/ruby-2.1.5/bin" ":" (getenv "PATH")))
  (setenv "GEM_HOME" "/home/martin/.rvm/gems/ruby-2.1.5")
  (add-to-list 'exec-path "/home/martin/.rvm/gems/ruby-2.1.5/bin")
  (add-to-list 'exec-path "/home/martin/.rvm/rubies/ruby-2.1.5/bin")
  ;; Human readable sizes in dired
  (setq dired-listing-switches "-alh")


  (setq x-select-enable-clipboard t) ; Enable copy-paste from the OS clipboard
#+END_SRC

* Package installation
All of the packages that I use get automatically installed. First we define ~required-packages~ and then a function that
iterates over all of them, installing each one. My =~/.emacs= configures [[https://melpa.org/][Melpa]] and [[https://marmalade-repo.org/][Marmalade]] before this gets executed.

#+BEGIN_SRC emacs-lisp
(defvar required-packages
  '(
    ;; https://github.com/benprew/flymake-puppet
    ;;
    ;; Puppet flymake support with puppet-lint
    flymake-puppet

	;; https://github.com/flycheck/flycheck
	;;
	;; Modern, on-the-fly syntax checking.
	flycheck

	;; https://github.com/purcell/whitespace-cleanup-mode
	;;
	;; whitespace-cleanup is a handy function, but putting it in
	;; before-save-hook for every buffer is overkill, and causes messy
	;; diffs when editing third-party code that did not initially have
	;; clean whitespace.  Additionally, whitespace preferences are
	;; often project-specific, and it's inconvenient to set up
	;; before-save-hook in a .dir-locals.el file.
	;; whitespace-cleanup-mode is a minor mode which calls
	;; whitespace-cleanup before saving the current buffer, but only
	;; if the whitespace in the buffer was initially clean. It
	;; determines this by quickly checking to see if
	;; whitespace-cleanup would have any effect on the buffer
	whitespace-cleanup-mode

	;; Provides git modification markers in the left hand side gutter~
	;; window that shows which lines have been locally modified
	;; compared to the git index
	;;
	;; This is currently commented out because it does not work well
	;; with linum-mode.
	; git-gutter

	magit
	yasnippet

	markdown-mode
	dockerfile-mode
	yaml-mode


	;; https://github.com/genehack/smart-tab
	;;
	;; An intelligent tab completion function for Emacs
	;; http://www.emacswiki.org/emacs/TabCompletion
	smart-tab

	indent-guide

	;; https://github.com/lunaryorn/puppet-mode
	;;
	;; Puppet Mode lets you edit Puppet 3 manifests with GNU Emacs 24.
	puppet-mode



	;; https://github.com/pezra/rspec-mode
	;;
	;; Enable running rspec tests from inside emacs
	rspec-mode


	;; https://github.com/rejeep/ruby-end.el
	;;
	;; Automatically insert 'end' blocks when 'do' is typed in ruby
	ruby-end

	solarized-theme

	;; https://github.com/antonj/scss-mode
	scss-mode

	;; https://github.com/capitaomorte/yasnippet
	;;
	;; Code snippet insertion
	yasnippet

  ) "a list of packages to ensure are installed at launch.")


; method to check if all packages are installed
(defun packages-installed-p ()
  (loop for p in required-packages
		when (not (package-installed-p p)) do (return nil)
	finally (return t)))

; if not all packages are installed, check one by one and install the missing ones.
(unless (packages-installed-p)
  ; check for new packages (package versions)
  (message "%s" "Emacs is now refreshing its package database...")
  (package-refresh-contents)
  (message "%s" " done.")
  ; install the missing packages
  (dolist (p required-packages)
	(when (not (package-installed-p p))
	  (package-install p))))
#+END_SRC

* Themes and visual config
** Smart mode line
[[https://github.com/Malabarba/smart-mode-line][Smart Mode Line]] is a mode-line for emacs.

#+BEGIN_QUOTE
Smart Mode Line is a sexy mode-line for Emacs. It aims to be easy to read from small to large monitors by using colors,
a prefix feature, and smart truncation.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :config
  (progn
    (setq sml/no-confirm-load-theme t)
    (setq sml/theme 'powerline)
    (sml/setup)
  )
)

(use-package smart-mode-line-powerline-theme
  :ensure t
)
#+END_SRC
* Editor augmentation
** Evil mode
[[http://www.emacswiki.org/emacs/Evil][Evil mode]] provides vim-style keybindings for emacs. It makes it much more usable for a long-time vim user. [[https://github.com/timcharper/evil-surround][Evil-surround]]
is an emacs wrapper of Tim Pope's [[https://github.com/tpope/vim-surround][vim-surround]] plugin. [[https://github.com/krisajenkins/evil-tabs][Evil-tabs]] is an emacs mode that allows tabs with vim's tab
keybindings.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode) ; Enable evil mode globally
)

(use-package evil-surround
  :ensure t
  :config (global-evil-surround-mode t)
)

(use-package evil-tabs
  :ensure t
  :config (global-evil-tabs-mode t)
)
#+END_SRC
** Projectile
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a
project level without introducing external dependencies(when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find (but for performance sake an indexing
mechanism backed by external commands exists as well).

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config (projectile-global-mode)		  ; Enable projectile everywhere
)
#+END_SRC

** Helm mode
[[https://github.com/emacs-helm/helm][Helm]] is incremental completion and selection narrowing framework for Emacs. It will help steer you in the right
direction when you're looking for stuff in Emacs (like buffers, files, etc). It's awesome when combined with
[[http://tuhdo.github.io/helm-projectile.html][helm-projectile]] for jumping around projects and finding files within them.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init (progn
    (require 'helm-config)
    (use-package helm-projectile
      :ensure t
      :commands helm-projectile
    )
    (use-package helm-ag :ensure t)
    (helm-mode 1)
    ;;(require 'helm-ls-git)
    ;(setq projectile-completion-system 'helm) ; Use helm as the projectile completion system
    ;; Enable Helm completion and suggestions
    (helm-autoresize-mode 1)
  )
  :bind ("M-x" . helm-M-x)
  :config (setq projectile-completion-system 'helm)
)
#+END_SRC

** Anzu
[[https://github.com/syohex/emacs-anzu][Anzu]] shows how many strings match the regex you're replacing and show the effect of replacement as the substitution is
typed. This is awesome. Using =%s/using/foo/= you'll see the change to =foo= in the buffer.

http://pragmaticemacs.com/emacs/prettier-text-replacement-with-anzu/

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :init (global-anzu-mode)
  :bind (
    ("M-%" . anzu-query-replace)
    ("C-M-%" . anzu-query-replace-regexp)
  )
)
#+END_SRC

** Ace-jump-mode
https://github.com/winterTTr/ace-jump-mode

Very fast navigation. Use =space <character to search for>= to activate in =evil-mode=.

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t
)
#+END_SRC

** Windmove
Add vim-like navigation between panes in a window.

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
(global-set-key (kbd "C-c <left>")	'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")	'windmove-up)
(global-set-key (kbd "C-c <down>")	'windmove-down)
#+END_SRC

** Org mode
I use org mode a lot as it's fantastically useful.

#+BEGIN_SRC emacs-lisp
(org-agenda-files (quote ("~/Dropbox/work/2015-08.org"))) ; This doesn't seem correct.
(setq org-log-into-drawer t) ; Log TODO state transition changes into a draw below the item
(setq org-todo-keywords (quote ((sequence "TODO(!)" "IN_PROGRESS(d!)" "|" "DONE(d!)"))))
(setq org-display-inline-images t) ; Render images inside org mode

(eval-after-load "org" '(require 'ox-md nil t)) ; Enable markdown export

(setq org-ditaa-jar-path "/home/martin/bin/ditaa0_9.jar")
#+END_SRC

Configure the languages that org-babel can use
#+BEGIN_SRC emacs-lisp
;; Source highlight font blocks in org mode using the correct mode
(setq-default org-src-fontify-natively t)

;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)
   (sh . t)
   (ditaa . t)
   (dot . t)
   (calc . t)
   (java . t)
   (emacs-lisp . t)
  )
)
#+END_SRC

Sometimes I want to be able to embed a YouTube video in an HTML export. This adds a custom link type called yt.

Source: http://endlessparentheses.com/embedding-youtube-videos-with-org-mode-links.html

#+BEGIN_SRC emacs-lisp
(defun org-interactive-hook ()
  "Mode configuration for org mode when it's run interactively"
  (interactive)
  (electric-pair-mode -1)               ; Disable electic pair mode, this makes typing URL links annoying.
  (org-add-link-type
   "yt"
   (lambda (handle)
     (browse-url
      (concat "https://www.youtube.com/embed/"
              handle)))
   (lambda (path desc backend)
     (cl-case backend
       (html (format yt-iframe-format
                     path (or desc "")))
       (latex (format "\href{%s}{%s}"
                      path (or desc "video")))))))

(defvar yt-iframe-format
  ;; You may want to change your width and height.
  (concat "<iframe width=\"440\""
          " height=\"335\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(add-hook 'org-mode-hook 'common-text-editing-hook)
(add-hook 'org-mode-hook 'org-interactive-hook)
#+END_SRC

** Rainbow mode
Highlights CSS colours in their actual colour. For instance (probably won't be visible in the export):

#+BEGIN_SRC css
div.example {
  background-color: #cc3;
}
#+END_SRC

This is enabled globally:

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :config (rainbow-mode)
)
#+END_SRC

** Rainbow-delimiters mode
rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or
braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to
spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config (rainbow-delimiters-mode)		; Highlight nested parentheses in different colours
)
#+END_SRC
** Coffee mode
Major mode for editing CoffeeScript files.

#+BEGIN_SRC emacs-lisp
(use-package coffee-mode :ensure t)
(use-package flymake-coffee :ensure t)
#+END_SRC
** Docker
#+BEGIN_SRC emacs-lisp
(use-package docker :ensure t)
(use-package dockerfile-mode :ensure t)
#+END_SRC
** Ruby configuration

#+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode
  :ensure t
  :config (setq ruby-deep-indent-paren nil)
)
#+END_SRC
* Other configuration
#+BEGIN_SRC emacs-lisp
; Indent guide - highlight current indent level vertically
; (indent-guide-global-mode)
; (setq indent-guide-recursive t)

;(global-whitespace-cleanup-mode)	; Enable whitespace-mode globally

;(setq whitespace-style (quote (spaces tabs newline space-mark tab-mark)))

(electric-pair-mode)			  ; Automatically complete parentheses when typed
(show-paren-mode)			  ; Automatically highlight parenthesis pairs
(setq show-paren-delay 0) ; show the paren match immediately
(global-set-key (kbd "C-x g") 'magit-status)

;;; Major mode configuration
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(coffee-tab-width 2)
 '(custom-safe-themes
   (quote
	("a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "1297a022df4228b81bc0436230f211bad168a117282c20ddcba2db8c6a200743" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(fill-column 120))



(defun common-text-editing-hook ()
  "Mode configuration for working with text files"
  (flyspell-mode)						; Automatic spell checking
  (auto-fill-mode)						; Add line wraps up to fill-column automatically
  )

(defun common-programming-language-hook ()
  "Mode configuration for working with source code files"
  (flycheck-mode)
  (flyspell-prog-mode))

;(defun projectile-custom-hook ()
;  "Mode configuration for helm-projectile"
;  (global-set-key (kbd "C-c p g") 'helm-projectile-grep))

(add-hook 'markdown-mode-hook 'common-text-editing-hook)
(add-hook 'coffee-mode-hook 'common-programming-language-hook)
(add-hook 'coffee-mode-hook 'flymake-coffee-load)
(add-hook 'puppet-mode-hook 'flymake-puppet-load)
(add-hook 'ruby-mode-hook 'common-programming-language-hook)

;(add-hook 'projectile-mode-hook 'projectile-custom-hook)
;(add-hook 'helm-projectile-mode-hook 'projectile-custom-hook)

;(global-unset-key (kbd "C-c p g"))
;(global-set-key (kbd "C-c p g") 'helm-projectile-grep)
;(define-key projectile-command-map (kbd "C-c p g") 'helm-projectile-grep)

;; If we're at the end of a word and hit TAB, run the expand command
;; for tab completion. If we're not at the end of a word, run the
;; normal tab command
;; http://emacsblog.org/2007/03/12/tab-completion-everywhere/
(defun indent-or-expand (arg)
  "Either indent according to mode, or expand the word preceding point."
  (interactive "*P")
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))))
      (dabbrev-expand arg)
    (indent-according-to-mode)))

(load-theme 'solarized-dark)

(local-set-key (kbd "<tab>") 'indent-or-expand)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whitespace-hspace ((t (:foreground "black"))))
 '(whitespace-space ((t (:foreground "dark slate gray" :slant italic))))
 '(whitespace-tab ((t (:foreground "black")))))

(add-to-list 'auto-mode-alist '("\\.hamlc$" . haml-mode))
(add-to-list 'auto-mode-alist '("\\.json.jbuilder$" . ruby-mode))



(setq rspec-use-rake-when-possible nil)
(setq rspec-use-bundler-when-possible nil)
(setq rspec-use-rvm-when-possible t)


(setq circe-network-options
      '(("Freenode"
         :tls t
         :nick "my-nick"
         :sasl-username "my-nick"
         :sasl-password "my-password"
         :channels ("#emacs-circe")
         )))

;; Things that are not in melpa
(add-to-list 'load-path "~/Dropbox/lisp/")
(require 'flymake-easy)

;; Map ace-jump-mode to just space when in normal mode in evil
(define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)

(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))

(setq yas-snippet-dirs
      '(
		"~/Dropbox/snippets"                 ;; personal snippets
		))

(yas-global-mode 1) 					; Enable yasnippets globally

(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
#+END_SRC
