#+TITLE: Martin Foot's Emacs Configuration
#+AUTHOR: Martin Foot
#+EMAIL: martin@mfoot.com
#+STARTUP: indent
#+OPTIONS: ^:nil # Disable underscore causing subscript

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

This file stores my emacs configuration. The latest version can be found [[https://github.com/mfoo/dotfiles/blob/master/.emacs.d/config.org][on GitHub]]. It is written using [[http://orgmode.org/][org-mode]] which
is an excellent way to organise notes and, as it turns out, an excellent way to organise my configuration file. It is
intended to be used with ~org-babel-load-file~ which parses this file, generates a =config.el= file, then executes that
during emacs startup. In this way my Emacs configuration serves as both the configuration settings /and/ a high level
documentation of those settings. It provides an incredibly convenient way to organise configuration the full benefit of
org mode's functionality available within the configuration file itself. More information can be found in the
[[Installation instructions][Installation instructions]] section.

I am not a long term emacs user yet, having started in October 2015 after using vim for around 7 years. As such I use
[[https://bitbucket.org/lyro/evil/wiki/Home][evil-mode]] all the time. This file is a work in progress that I try to keep organised. Like many people experiencing a
new editor rather than spending an extended period of time reading emacs' extensive documentation, the configuration
here has been a mix of searching and reading other people's =.emacs= files. I would recommend taking small parts of it and
asking the inbuilt help system what each command does. I've tried to keep each section documented. You can do this with
=C-h a=.

Organising my configuration in this way came about after a general interest in literate programming and after seeing
these:
- a [[http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php][blog post by Arnaud Legrand]]
- a [[https://www.youtube.com/watch?v=VIuOwIBL-ZU][YouTube video by Daniel Mai]]
I already make notes on all my work and a lot of personal tasks throughout the day. This way I know I can confirm
exactly what queries I executed or steps I took on a support request, or the methods I took at resolving a certain
issue. Since I've been using org to do this, having org's power inside my editor configuration was a huge plus.

This file makes a lot of use of the ~use-package~ function. This is a really nice way to keep the installation of a
package, it's keybindings, configuration, packaged together in the config file. There's a good description on how it
works [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][here]] and you can see the project page [[https://github.com/jwiegley/use-package][here]].

*Note*: Parts of this file are marked TODO. These are sections that require more work. They may not be properly
documented, may be badly organised (maybe they should be part of other sections), or could be part of my old emacs
configuration from before I used =org-mode= that I still haven't converted.
* Installation instructions
#+BEGIN_COMMENT
I couldn't get org mode's publishing to handle this link nicely, so unfortunately it's in raw HTML.
#+END_COMMENT

#+BEGIN_HTML
Copy the <a href="config.org">raw version of this file</a> to <code>~/.emacs.d/config.org</code>.
#+END_HTML

Then add ~(org-babel-load-file (concat user-emacs-directory "config.org"))~ to =~/.emacs=.

Here is the contents of my =~/.emacs= file:

#+BEGIN_SRC emacs-lisp :tangle ~/.emacs
;; Martin's .emacs file
;;
;; Author: Martin Foot <martin@mfoot.com>

;; Load the config
(org-babel-load-file (concat user-emacs-directory "config.org"))
#+END_SRC

That's it.

The reason that this works is that some parts of this file are carefully organised. =org-babel-load-file= pulls out and
executes =emacs-lisp= code blocks in the order they're in the file. This means that it's very important that my [[Package repositories][Package
repositories]] section comes before any of the other non-standard config.
* Package repositories
I use Melpa and Marmalade for repositories.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

Then, since I use ~use-package~ for every package from the repositories, initialise this first.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC
* User information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Martin Foot"
      user-mail-address "martin@mfoot.com")
#+END_SRC
* Parentheses
Use =electric-pair-mode= to automatically close inserted parentheses and braces. I explicitly disable this when using
=org-mode= because when typing links it's annoying.

#+BEGIN_SRC emacs-lisp
(electric-pair-mode)
(add-hook 'org-mode-hook (lambda () (electric-pair-mode nil)))
#+END_SRC

=show-paren-mode= makes emacs highlight closing parentheses, braces, and curly braces.

#+BEGIN_SRC emacs-lisp
(show-paren-mode)			; Automatically highlight parenthesis pairs
(setq show-paren-delay 0) ; show the paren match immediately
#+END_SRC

Then I use =[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]= to highlight nested parentheses in different colours. It has an annoying disclaimer that
there's no global mode for it, so I've enabled it for org mode only. This conveniently applies to source code blocks
inside org mode. This means I get the highlighting on any lisp configuration as well as code I'm working on from inside
org mode.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config (rainbow-delimiters-mode)
)

(add-hook 'org-mode-hook (lambda () (rainbow-delimiters-mode)))
#+END_SRC
* Fill columns and line highlighting
I find a 120 character line length is best for modern screens. Individual languages/major modes can override this.

In text-based modes (non-programming modes) I enable automatic line wrapping also.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 120)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

I also like a highlight on the screen to show the current cursor line.

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC
* Shortcut help
It's very difficult to remember all the shortcuts available in emacs. The =guide-key= plugin pops up a list of available
suggestions after a little while.

=:diminish guide-key-mode= configures the mode to not show up in the list of minor modes.

I've configured it to wait 0.5 seconds before popping up the suggestions list.

- =C-c= :: Active mode specific commands
- =C-x= :: Emacs commands

#+BEGIN_SRC emacs-lisp
(use-package guide-key
  :ensure t
  :diminish guide-key-mode
  :init
  (setq guide-key/idle-delay 0.5)
  :config
  (setq guide-key/guide-key-sequence '("C-x" "C-c"))
  (guide-key-mode 1)
)
#+END_SRC
* Line numbering and cursor position
I enable line numbers globally and enable the cursor position being shown in the bottom left. Note: Enabling line
numbers globally is not perfect as it includes things like lists of files when using =C-x f=. This doesn't really make
sense.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'linum-mode)
(add-hook 'prog-mode-hook 'linum-mode)
(setq linum-format "%d ") ; Place a space after the line numbers so text doesn't begin instantly
#+END_SRC

I also show the current cursor position column number in the bottom left of the screen:

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC
* Yes or no prompts
Use 'y' or 'n' instead of 'yes' and 'no' in interactive prompts. This saves typing.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Symbolic links
By default emacs doesn't follow symlinks

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
* OS Clipboard integration
Add proper support for the OS clipboard integrations. Only tested under X.

First we enable the emacs copy buffer to be linked to the OS clipboard. Lines copied from the OS can be pasted into
emacs and lines copied from emacs can be pasted into other OS windows.

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

Now we enable 'primary selection'. The clipboard config above is for the operating system copy buffer with =C-c= and
=C-v=. Primary selection is the mouse select buffer that usually works as pasted with a middle click. Enabling this allows
selected text in emacs to be copied there so I can select in the program and paste into somewhere else using X.

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-primary t)
(setq mouse-drag-copy-region t)
#+END_SRC
* Temporary backup files
Auto backup can be disabled in emacs with ~(setq make-backup-files nil)~ but rather than disabling them we can simply move
the directory that they get placed in. This keeps them out of the way in case we need them.

I've used =~/.emacs-backups= because my ~/.emacs.d is in git, I don't need to keep backups.

#+BEGIN_SRC emacs-lisp
; From http://www.emacswiki.org/emacs/BackupDirectory
; and http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
(setq
   backup-by-copying t ; Ensure backups are copied, not renamed. Important for symlinks
   backup-directory-alist '(("" . "~/.emacs-backups")) ; Keep backups in ~/.emacs-backups, not the same directory tree
   delete-old-versions t ; Delete old versions without prompting
   kept-new-versions 10 ; Keep multiple versioned backup files
   kept-old-versions 0 ; Don't keep any beyond that
   version-control t) ; Use versioned backups

(setq vc-make-backup-files t) ; Backup even when it's a version controlled project
#+END_SRC
* Font size
Add some keybindings to increase and decrease the font size

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+END_SRC
* Startup message
Don't show the default emacs startup message when it's opened

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

Let's also show a fortune message in the scratch buffer when we start emacs:

[[https://github.com/andschwa/fortune-cookie][Source here]]

#+BEGIN_SRC emacs-lisp
(use-package fortune-cookie
  :ensure t
  :config
  (setq fortune-cookie-cowsay-enable nil) ; Disable cowsay
  (fortune-cookie-mode)                   ; Enable fortune cookie mode
)
#+END_SRC
* Terminal bells
Disable the terminal bell. Use a visible bell instead. A non-nil value causes emacs to try and flash the frame to
represent a bell.

#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC
* Menu bar
Don't show emacs' menu bar - I remember enough shortcuts and understand how to use the inbuilt help system if I don't
remember the shortcut for something. When we're using graphical emacs, also disable the tooltips for the mouse an the
scroll bar.

#+BEGIN_SRC emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))

(menu-bar-mode -1)
#+END_SRC
* Whitespace
** Trailing whitespace
Highlight trailing whitespace on lines

#+BEGIN_SRC emacs-lisp
(setq-default show-trailing-whitespace t)
#+END_SRC

Delete trailing whitespace automatically on save

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

I also don't like seeing tabs mixed with spaces. This section needs some work however so is currently commented out. I
need to customise the faces that =whitespace-mode= uses.

#+BEGIN_SRC
;(setq whitespace-line-column 118) ; Highlight lines over 118 characters in whitespace-mode #+END_SRC
#+END_SRC
** Default emacs backspace behaviour
I despise emacs' default behaviour when hitting backspaces on tabs - it converts the tab into the tab-width number of
spaces and inserts tab-width -1 spaces. This seems like an insane default.

#+BEGIN_SRC emacs-lisp
(setq backward-delete-char-untabify-method nil)
#+END_SRC
** Tabs
Change the default tab settings to use four spaces. This controls how big a tab appears inside emacs.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
;(setq-default tab-always-indent 'complete)
#+END_SRC

Set up the tab stop list. This is what emacs uses when it can't find an appropriate tab stop - i.e how much to try
indenting when tab is hit.

#+BEGIN_SRC emacs-lisp
(setq-default tab-stop-list (number-sequence 4 200 4))
#+END_SRC

Insert tabs by default when auto-formatting.

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode t)
#+END_SRC
** TODO Highlighting font faces
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whitespace-hspace ((t (:foreground "black"))))
 '(whitespace-space ((t (:foreground "dark slate gray" :slant italic))))
 '(whitespace-tab ((t (:foreground "black")))))
;(global-whitespace-cleanup-mode)	; Enable whitespace-mode globally

;(setq whitespace-style (quote (spaces tabs newline space-mark tab-mark)))
** Git
I use the excellent [[http://magit.vc/][magit]] for emacs git integration. This is bound to =C-x g=.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status))
)
#+END_SRC

* Region selection
=expand-region= makes it really easy to quickly select regions of text getting larger.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :defer t
  :bind ("C-=" . er/expand-region)
)
#+END_SRC
* IN_PROGRESS Org Mode
When I originally wrote this file I had a few simple customisations here. As I discovered new features and customised
more things it became larger and larger and I had to split it into subcategories.
** IN_PROGRESS Key bindings
:LOGBOOK:
- State "IN_PROGRESS" from "TODO"       [2015-12-03 Thu 10:17]
- State "TODO"       from ""           [2015-12-03 Thu 09:51]
:END:
This table lists (and defines) the key bindings that I often use. Most are set to the defaults but it provides both an
easy way to set variables and a handy reference. Check the source for how the table is used.

*Note* to future me: If the key is already bound and you're setting a default here, you can find out the name of the
function with =C-h k <key combination>=.

TODO: These are the header rows but they cause problems with org-babel evaluation. I would also like to use org's
=monospace markup= but this is causing problems. I need to strip the "=" character out of the value in the table cells.

| Key binding | Description | Function   |
|-------------+-------------+------------|

#+tblname: org-key-bindings
| C-c a   | View agenda                                                   | org-agenda  |
| C-c b   | Switch buffer between different org mode files                | org-switchb |
| C-c C-t | Assign or modify a TODO state for the current node            | org-todo    |
| C-c C-a | View current task attachments / attach a file to current task | org-attach  |

#+BEGIN_SRC emacs-lisp :var org-key-bindings=org-key-bindings
(defun mfoot-define-key-bindings (input)
  (global-set-key (kbd (car input)) (last input)))
  ; Handle using org's monospace markup (=example=)
  ;(global-set-key (kbd (remove "=" (car input))) (remove "=" (last input))))

(mapcar #'mfoot-define-key-bindings org-key-bindings)
#+END_SRC
** Task tracking
*** Task transition timing
I like to see timestamps for task transitions but I don't want them filling up screen real estate. Logging these into
drawers makes them easily expandable and collapsible.

#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC
*** TODO State transitions
Here states transitions are configured. This is largely based on [[http://doc.norang.ca/org-mode.html#TasksAndStates][this document]] but I use =IN_PROGRESS= instead of =NEXT=.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
  (quote ((sequence "TODO(t!)" "IN_PROGRESS(i!)" "|" "DONE(d!)")
  (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
)
#+END_SRC

I have defined colours for each task state. TODO is red (bad), blocked is orange and magnta (somewhat bad), in progress
is gold (OK) and complete is green.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
  (quote (("TODO" :foreground "red" :weight bold)
    ("IN_PROGRESS" :foreground "gold" :weight bold)
    ("DONE" :foreground "forest green" :weight bold)
    ("WAITING" :foreground "orange" :weight bold)
    ("HOLD" :foreground "magenta" :weight bold)
    ("CANCELLED" :foreground "forest green" :weight bold)
  )
))
#+END_SRC

Since I have more than two states, moving between them with the default =S-<left>= and =S-<right>= is slow. This enables =C-c
c t= as a shortcut for quickly choosing the state. some of the states below have an "@" symbol next to them. This lets me
write a reason why a task is cancelled or blocked, or what it's waiting on. The buffer will appear when selecting such a
state that lets me enter the reason.

#+BEGIN_SRC emacs-lisp
(setq org-use-fast-todo-selection t)
#+END_SRC
** Agenda
Tell org mode where my notes are usually kept. This allows the agenda view to index all my org notes for TODO items and
scheduled items. Some of these directories won't exist on some machines so we filter the list at startup based on
whether or not the file exists.

#+BEGIN_SRC emacs-lisp
(require 'cl) ; remove-if-not is inside the common-lisp package
(setq org-agenda-files (remove-if-not 'file-exists-p '("~/Repositories/notes" "~/repositories/notes" "~/Dropbox/life")))
#+END_SRC

We also switch archive directories for work and home.

#+BEGIN_SRC emacs-lisp
;(setq org-archive-location
;  (if (file-exists-p "~/Repositories/notes")
;    "~/Repositories/notes/archive"
;    "~/Dropbox/life/archive"
;  )
;)
#+END_SRC

Set up a key binding for the org agenda

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

Enable pretty entities - shows e.g. \alpha \beta \gamma as UTF-8 characters.

#+BEGIN_SRC emacs-lisp
(setq org-pretty-entities t)
#+END_SRC

In =org-mode= we can use:
- \=fixed\= for fixed-width (=example=)
- \~code\~ for code (~example~)
- \*bold\* for bold (*example*)
- \/italics\/ for emphasis (/example/)
- \_underline\_ for underline (_example_)

When a block of text has some emphasis on it, get emacs to hide the markup characters:

#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC

Ensure native syntax highlighting is used for inline source blocks in org files

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

When emacs source-formats a code block, don't add spaces before it (it messes with syntax highlighting in major modes).

#+BEGIN_SRC emacs-lisp
(setq org-edit-src-content-indentation 0)
#+END_SRC

Configure the languages that Babel will automatically syntax highlight

#+BEGIN_SRC emacs-lisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)
   (sh . t)
   (ditaa . t)
   (dot . t)
   (calc . t)
   (java . t)
   (emacs-lisp . t)
  )
)
#+END_SRC

When we're using a GUI emacs we can display embedded images on startup

#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-babel-result-hide-all)
#+END_SRC

When exporting to HTML change check boxes into actual HTML check boxes.

#+BEGIN_SRC emacs-lisp
(setq org-html-checkbox-type 'html)
#+END_SRC

I use =ditaa= for block diagrams. This executes a java program and needs to know where to find the jar.

#+BEGIN_SRC emacs-lisp
(setq org-ditaa-jar-path "/home/martin/bin/ditaa0_9.jar")
#+END_SRC

Since org mode is plain text, I also enable spell checking when I'm using it.

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook (lambda () (flyspell-mode)))
#+END_SRC

I use graphical emacs so that I can display inline images. Set them to have a maximum size so large images don't fill
the screen.

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width 800)
#+END_SRC

I've been using a single TODO list file and using org-capture to capture todo items to my org agenda from anywhere. This
tends to happen at home rather than at work as my work org files contain appropriate TODOs arranged by date headers. At
home and in my blog I can capture TODO items and put them in this directory.

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/Dropbox/life/life.org")
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

Customise the colours of TODO task priority indicators:

#+BEGIN_SRC emacs-lisp
(setq org-priority-faces '((?A :foreground "dark orange") (?B :foreground "tomato") (?C :foreground "firebrick")))
#+END_SRC

TODO: Investigate org-capture, org-agenda etc. See http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline45. There
is a HUGE wealth of information here.
*** Agenda notifications
[[https://github.com/groksteve/org-alert][org-alert]] allows showing system notifications when agenda alerts are coming up.

#+BEGIN_SRC emacs-lisp
(use-package org-alert
  :ensure t
  :init
  (setq alert-default-style 'libnotify)
  (setq org-alert-notificatoin-title "Org Agenda Notification")
  :config
  (org-alert-enable)
)
#+END_SRC

#+RESULTS:
: t

** Avoiding Weasel Words
This makes use of Sacha Chua's [[https://github.com/sachac/artbollocks-mode][artbollocks-mode]] to highlight 'weasel words'. This should help improve my writing by
stopping me from using pointless terms.

The words here are initially stolen from Sacha's [[http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline38][org configuration]].

#+BEGIN_SRC emacs-lisp
(use-package :artbollocks-mode
  :defer t
  :init
  (setq artbollocks-weasel-words-regex
    (concat "\\b" (regexp-opt
      '("one of the"
        "should"
        "just"
        "sort of"
        "a lot"
        "probably"
        "maybe"
        "perhaps"
        "I think"
        "really"
        "pretty"
        "nice"
        "action"
        "utilize"
        "leverage") t) "\\b")
  )
  (setq artbollocks-passive-voice nil) ; Disable passive voice highlighting
  ;(setq artbollocks-jargon nil)
  :config
  (add-hook 'text-mode-hook 'artbollocks-mode)
)
#+END_SRC
** Emoji
I rarely use smiley faces in notes, but sometimes the occasion calls for it. Emojify displays these emojis in
interactive buffers.

Example: :)

#+BEGIN_SRC emacs-lisp
(use-package emojify
  :ensure t
  :init
  (add-hook 'org-mode-hook 'emojify-mode))
#+END_SRC
* TODO Blog
[[http://www.mfoot.com][My blog]] uses a static site generator called [[https://jekyllrb.com/][Jekyll]]. This parses YAML files and produces static HTML content which I then
host on [[https://aws.amazon.com/s3/][Amazon S3]]. I really like the power of =org-mode= in Emacs, so this configuration block enables me to write blog
posts using =org-mode= and then use =org-mode='s publishing system to publish these files in a format that Jekyll
understands. I can then run Jekyll normally and it will take these org-published files and convert them into the static
website. The configuration here is based on [[ http://orgmode.org/worg/org-tutorials/org-jekyll.html][Using org to Blog with Jekyll]], so reading through that is a good idea before
trying to understand this. I've adapted it slightly to work with the latest =org-mode= (the publishing functions changed
name). I've also added an third part of the project that handles exporting this org mode config file into a
=/static/emacs-config= directory. Whenever I run ~org-publish-all~ the latest version of the config file gets pulled in and
so the config file hosted on my blog is always as up-to-date as the latest blog post.

Here we define a list of projects for org mode. When using the export processor (=C-c C-e=) a projects option now appears
at the bottom from any file. Two projects are defined; one for the blog posts that get processed with the HTML
publishing function, and one for static content that gets copied verbatim. I can select a project and select either one
of the two projects or the component project that wraps both of them. Org will maintain timestamps and caches of these
files so that it doesn't regenerate what it doesn't have to.

TODO: Describe folder structure. Link to GitHub?

#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
  '(
     ("org-mfoot" ; Export my blog to the Jekyll format for ~jekyll build~
       ;; Path to your org files.
       :base-directory "~/repositories/mfoot.com/org/"
       :base-extension "org"

       ;; Path to your Jekyll project.
       :publishing-directory "~/repositories/mfoot.com/jekyll/"
       :recursive t
       :publishing-function org-html-publish-to-html
       :html-extension "html"
       :body-only t ;; Only export section between <body> </body>

       :section-numbers nil
       :with-toc nil
       :auto-index nil
       :auto-preamble nil
       :body-only t
       :auto-postamble nil
     )

    ("org-static-mfoot"
          :base-directory "~/repositories/mfoot.com/org/"
          :base-extension "css\\|js\\|png\\|jpg\\|gif"
          :publishing-directory "~/repositories/mfoot.com/jekyll"
          :recursive t
          :publishing-function org-publish-attachment
    )

    ("emacs-dotfiles-mfoot.com" ; Publish an HTML version of this file to the static folder.
      :base-directory "~/repositories/dotfiles/.emacs.d/"
      :base-extension "org"
      :publishing-directory "~/repositories/mfoot.com/jekyll/static/emacs-config"
      :exclude ".*"
      :include ("config.org")
      :publishing-function org-html-publish-to-html
      :html-extension "html"
    )

    ("emacs-config.org-mfoot.com" ; Publish the raw version of this file alongside the HTML
      :base-directory "~/repositories/dotfiles/.emacs.d/"
      :base-extension "org"
      :publishing-directory "~/repositories/mfoot.com/jekyll/static/emacs-config"
      :exclude ".*"
      :include ("config.org")
      :publishing-function org-publish-attachment
    )

    ("mfoot.com" :components (
      "org-mfoot"
      "org-static-mfoot"
      "emacs-dotfiles-mfoot.com"
      "emacs-config.org-mfoot.com"
    )
  )
))
#+END_SRC

In addition, I need to install the =htmlize= package to provide syntax highlighting when exporting HTML. See [[http://stackoverflow.com/questions/24082430/org-mode-no-syntax-highlighting-in-exported-html-page][here]] for more
information.

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t
)
#+END_SRC

In order to get images to work both inside emacs and inside the generated output I need to register a custom image
format. Emacs currently will only generate ~<a href />~ tags for images it can actually resolve on the filesystem. Since
my images on my blog are hosted under =/images=, emacs will generate =file:///images= URLs which is not useful. The
following allows me to use =img:../images/2015/11/photo.png= as an image reference and have both emacs and the html
generator generate the correct paths. This is modified from [[http://stackoverflow.com/a/14841597][this StackOverflow answer]].

#+BEGIN_SRC emacs-lisp
(defun org-custom-link-img-follow (path)
  (org-open-file-with-emacs
   (format "../images/%s" path)))

(defun org-custom-link-img-export (path desc format)
  (cond
   ((eq format 'html)
    (format "<img src=\"/images/%s\" alt=\"%s\"/>" path desc))))

(org-add-link-type "img" 'org-custom-link-img-follow 'org-custom-link-img-export)
#+END_SRC

TODO: Write some notes on how I publish this to S3 with s3-website. I always forget this and have to check my bash
history.
* Window navigation and scrolling
Scroll smoothly rather than by paging
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
#+END_SRC

When the cursor moves past the top or bottom of the window, scroll one line at a time rather than jumping. I don't like
having to find my place in the file again.

#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 10000)
#+END_SRC

Add vim-like navigation between panes in a window using windmove.

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
(global-set-key (kbd "C-c <left>") 'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>") 'windmove-up)
(global-set-key (kbd "C-c <down>") 'windmove-down)
#+END_SRC

I use [[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]] for fast buffer navigation. It allows the use of =<space> <character to search for>= to highlight
jump targets of that character. This has to be configured in =evil-mode=.

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :init (progn
    (use-package evil
      :ensure t
    )
  )
  :config  (define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)
)
#+END_SRC
* Reloading files
I swap branches a lot. =auto-reload-mode= will automatically reload opened buffers (prompting to save or not)

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
* C
At work we use BSD-style C/C++. We also set the default indentation to four spaces.

#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4)
(setq-default c-default-style "bsd")
#+END_SRC
* TODO Base editor configuration
I came from Vim and some of the default emacs functionality felt weird to me.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 90)

(tool-bar-mode -1)

;; TODO: Try and get projectile-ag to work. Is git grep better?
(setenv "PATH" (concat (getenv "PATH") ":" "/usr/local/bin"))
(setenv "PATH" (concat  "/home/martin/.rvm/rubies/ruby-2.1.5/bin" ":" "/home/martin/.rvm/gems/ruby-2.1.5/bin" ":" (getenv "PATH")))
(setenv "GEM_HOME" "/home/martin/.rvm/gems/ruby-2.1.5")
(add-to-list 'exec-path "/home/martin/.rvm/gems/ruby-2.1.5/bin")
(add-to-list 'exec-path "/home/martin/.rvm/rubies/ruby-2.1.5/bin")
;; Human readable sizes in dired
(setq dired-listing-switches "-alh")


#+END_SRC

* TODO Package installation
All of the packages that I use get automatically installed. First we define ~required-packages~ and then a function that
iterates over all of them, installing each one. My =~/.emacs= configures [[https://melpa.org/][Melpa]] and [[https://marmalade-repo.org/][Marmalade]] before this gets executed.

#+BEGIN_SRC emacs-lisp
(defvar required-packages
  '(
    ;; https://github.com/benprew/flymake-puppet
    ;;
    ;; Puppet flymake support with puppet-lint
    flymake-puppet

	;; https://github.com/flycheck/flycheck
	;;
	;; Modern, on-the-fly syntax checking.
	flycheck

	;; https://github.com/purcell/whitespace-cleanup-mode
	;;
	;; whitespace-cleanup is a handy function, but putting it in
	;; before-save-hook for every buffer is overkill, and causes messy
	;; diffs when editing third-party code that did not initially have
	;; clean whitespace.  Additionally, whitespace preferences are
	;; often project-specific, and it's inconvenient to set up
	;; before-save-hook in a .dir-locals.el file.
	;; whitespace-cleanup-mode is a minor mode which calls
	;; whitespace-cleanup before saving the current buffer, but only
	;; if the whitespace in the buffer was initially clean. It
	;; determines this by quickly checking to see if
	;; whitespace-cleanup would have any effect on the buffer
	whitespace-cleanup-mode

	;; Provides git modification markers in the left hand side gutter~
	;; window that shows which lines have been locally modified
	;; compared to the git index
	;;
	;; This is currently commented out because it does not work well
	;; with linum-mode.
	; git-gutter

  markdown-mode
	dockerfile-mode
	yaml-mode


	;; https://github.com/genehack/smart-tab
	;;
	;; An intelligent tab completion function for Emacs
	;; http://www.emacswiki.org/emacs/TabCompletion
	smart-tab

	indent-guide

	;; https://github.com/lunaryorn/puppet-mode
	;;
	;; Puppet Mode lets you edit Puppet 3 manifests with GNU Emacs 24.
	puppet-mode



	;; https://github.com/pezra/rspec-mode
	;;
	;; Enable running rspec tests from inside emacs
	rspec-mode


	;; https://github.com/rejeep/ruby-end.el
	;;
	;; Automatically insert 'end' blocks when 'do' is typed in ruby
	ruby-end


	;; https://github.com/antonj/scss-mode
	scss-mode

  ) "a list of packages to ensure are installed at launch.")


;; method to check if all packages are installed
;(defun packages-installed-p ()
;  (loop for p in required-packages
;		when (not (package-installed-p p)) do (return nil)
;	finally (return t)))
;
;; if not all packages are installed, check one by one and install the missing ones.
;(unless (packages-installed-p)
;  ; check for new packages (package versions)
;  (message "%s" "Emacs is now refreshing its package database...")
;  (package-refresh-contents)
;  (message "%s" " done.")
;  ; install the missing packages
;  (dolist (p required-packages)
;	(when (not (package-installed-p p))
;	  (package-install p))))
#+END_SRC

* Themes and visual config
** Smart mode line
[[https://github.com/Malabarba/smart-mode-line][Smart Mode Line]] is a mode-line for emacs.

#+BEGIN_QUOTE
Smart Mode Line is a sexy mode-line for Emacs. It aims to be easy to read from small to large monitors by using colors,
a prefix feature, and smart truncation.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (progn
      (setq sml/no-confirm-load-theme t)
      (setq sml/theme 'powerline)
      (sml/setup)
    )
  )

  (use-package smart-mode-line-powerline-theme
    :ensure t
  )

  ;; Allow the solarized-dark theme
  (setq custom-safe-themes
     (quote
      ("a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "1297a022df4228b81bc0436230f211bad168a117282c20ddcba2db8c6a200743" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4"
      default)))


  (use-package solarized-theme
    :ensure t
    :init (load-theme 'solarized-dark))
#+END_SRC
* Editor augmentation
** Vim customisations
[[http://www.emacswiki.org/emacs/Evil][Evil mode]] provides vim-style keybindings for emacs. It makes it much more usable for a long-time vim user. [[https://github.com/timcharper/evil-surround][Evil-surround]]
is an emacs wrapper of Tim Pope's [[https://github.com/tpope/vim-surround][vim-surround]] plugin. [[https://github.com/krisajenkins/evil-tabs][Evil-tabs]] is an emacs mode that allows tabs with vim's tab
keybindings.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode) ; Enable evil mode globally
)

(use-package evil-surround
  :ensure t
  :config (global-evil-surround-mode t)
)

(use-package evil-tabs
  :ensure t
  :config (global-evil-tabs-mode t)
)
#+END_SRC

By default emacs doesn't tab indent to the current level when you hit return. Move to vim style.

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC
** Projectile
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a
project level without introducing external dependencies(when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find (but for performance sake an indexing
mechanism backed by external commands exists as well).

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config (projectile-global-mode)		  ; Enable projectile everywhere
)
#+END_SRC
** TODO Helm mode
:LOGBOOK:
- State "TODO"       from ""           [2015-11-21 Sat 10:01]
:END:
[[https://github.com/emacs-helm/helm][Helm]] is incremental completion and selection narrowing framework for Emacs. It will help steer you in the right
direction when you're looking for stuff in Emacs (like buffers, files, etc). It's awesome when combined with
[[http://tuhdo.github.io/helm-projectile.html][helm-projectile]] for jumping around projects and finding files within them.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :init (progn
    (require 'helm-config)
    (use-package helm-projectile
      :ensure t
      :commands helm-projectile
    )
    (use-package helm-ag :ensure t)
    (helm-mode 1)
    ;;(require 'helm-ls-git)
    ;(setq projectile-completion-system 'helm) ; Use helm as the projectile completion system
    ;; Enable Helm completion and suggestions
    (helm-autoresize-mode 1)
  )
  :bind ("M-x" . helm-M-x)
  :config (setq projectile-completion-system 'helm)
)
#+END_SRC

The TODO here is that helm is /awesome/. There are so many functions to learn. I need to find some easy-to-remember
shortcuts for things like =helm-occur=. Spend some time reading
http://pages.sachachua.com/.emacs.d/Sacha.html#orgheadline12.
** Anzu
[[https://github.com/syohex/emacs-anzu][Anzu]] shows how many strings match the regex you're replacing and show the effect of replacement as the substitution is
typed. This is awesome. Using =%s/using/foo/= you'll see the change to =foo= in the buffer.

http://pragmaticemacs.com/emacs/prettier-text-replacement-with-anzu/

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :init (global-anzu-mode)
  :bind (
    ("M-%" . anzu-query-replace)
    ("C-M-%" . anzu-query-replace-regexp)
  )
)
#+END_SRC
** Rainbow mode
Highlights CSS colours in their actual colour. For instance (probably won't be visible in the export):

#+BEGIN_SRC css
div.example {
  background-color: #cc3;
}
#+END_SRC

This is enabled globally:

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :config (rainbow-mode)
)
#+END_SRC
** Coffee mode
Major mode for editing CoffeeScript files.

#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :ensure t
  :config (setq coffee-tab-width 2)
)

(use-package flymake-coffee :ensure t)
#+END_SRC
** Docker
#+BEGIN_SRC emacs-lisp
(use-package docker :ensure t)
(use-package dockerfile-mode :ensure t)
#+END_SRC
** Ruby configuration

#+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode
  :ensure t
  :config (setq ruby-deep-indent-paren nil)
)
#+END_SRC
* TODO Code snippet handling
I use [[https://github.com/capitaomorte/yasnippet][yasnippet]] for code snippet handling. This is enabled globally.

#+BEGIN_SRC emacs-lisp
; (use-package yasnippet
;   :ensure t
;   :config (yas-global-mode 1)
; )
#+END_SRC
* TODO Other configuration
#+BEGIN_SRC emacs-lisp
; Indent guide - highlight current indent level vertically
; (indent-guide-global-mode)
; (setq indent-guide-recursive t)

(defun common-text-editing-hook ()
  "Mode configuration for working with text files"
  (flyspell-mode)						; Automatic spell checking
  )

(defun common-programming-language-hook ()
  "Mode configuration for working with source code files"
  (flycheck-mode)
  (flyspell-prog-mode))

;(defun projectile-custom-hook ()
;  "Mode configuration for helm-projectile"
;  (global-set-key (kbd "C-c p g") 'helm-projectile-grep))

(add-hook 'markdown-mode-hook 'common-text-editing-hook)
(add-hook 'coffee-mode-hook 'common-programming-language-hook)
(add-hook 'coffee-mode-hook 'flymake-coffee-load)
(add-hook 'puppet-mode-hook 'flymake-puppet-load)
(add-hook 'ruby-mode-hook 'common-programming-language-hook)

;(add-hook 'projectile-mode-hook 'projectile-custom-hook)
;(add-hook 'helm-projectile-mode-hook 'projectile-custom-hook)

;(global-unset-key (kbd "C-c p g"))
;(global-set-key (kbd "C-c p g") 'helm-projectile-grep)
;(define-key projectile-command-map (kbd "C-c p g") 'helm-projectile-grep)

;; If we're at the end of a word and hit TAB, run the expand command
;; for tab completion. If we're not at the end of a word, run the
;; normal tab command
;; http://emacsblog.org/2007/03/12/tab-completion-everywhere/
(defun indent-or-expand (arg)
  "Either indent according to mode, or expand the word preceding point."
  (interactive "*P")
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))))
      (dabbrev-expand arg)
    (indent-according-to-mode)))

(local-set-key (kbd "<tab>") 'indent-or-expand)



(add-to-list 'auto-mode-alist '("\\.hamlc$" . haml-mode))
(add-to-list 'auto-mode-alist '("\\.json.jbuilder$" . ruby-mode))



(setq rspec-use-rake-when-possible nil)
(setq rspec-use-bundler-when-possible nil)
(setq rspec-use-rvm-when-possible t)


(setq circe-network-options
      '(("Freenode"
         :tls t
         :nick "my-nick"
         :sasl-username "my-nick"
         :sasl-password "my-password"
         :channels ("#emacs-circe")
         )))

;; Things that are not in melpa
(add-to-list 'load-path "~/Dropbox/lisp/")
(require 'flymake-easy)

(add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))

(setq yas-snippet-dirs
      '(
		"~/Dropbox/snippets"                 ;; personal snippets
		))

(set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
	("a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "1297a022df4228b81bc0436230f211bad168a117282c20ddcba2db8c6a200743" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(send-mail-function (quote smtpmail-send-it)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whitespace-hspace ((t (:foreground "black"))))
 '(whitespace-space ((t (:foreground "dark slate gray" :slant italic))))
 '(whitespace-tab ((t (:foreground "black")))))



(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(coffee-tab-width 2)
 '(custom-safe-themes
   (quote
	("a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "1297a022df4228b81bc0436230f211bad168a117282c20ddcba2db8c6a200743" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(fill-column 120)
 '(send-mail-function (quote smtpmail-send-it)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(whitespace-hspace ((t (:foreground "black"))))
 '(whitespace-space ((t (:foreground "dark slate gray" :slant italic))))
 '(whitespace-tab ((t (:foreground "black")))))
#+END_SRC
